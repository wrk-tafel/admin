[
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\api\\distribution-ticket-api.service.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 16,
        "column": 48,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 16,
        "endColumn": 80
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DistributionTicketApiService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  getCurrentTicket(): Observable<TicketNumberResponse> {\r\n    return this.http.get<TicketNumberResponse>('/distributions/tickets/current');\r\n  }\r\n\r\n  getCurrentTicketForCustomer(customerId: number): Observable<TicketNumberResponse> {\r\n    let queryParams = new HttpParams();\r\n    queryParams = queryParams.set('customerId', customerId);\r\n    return this.http.get<TicketNumberResponse>('/distributions/tickets/current', {params: queryParams});\r\n  }\r\n\r\n  deleteCurrentTicketOfCustomer(customerId: number): Observable<void> {\r\n    let queryParams = new HttpParams();\r\n    queryParams = queryParams.set('customerId', customerId);\r\n    return this.http.delete<void>('/distributions/tickets/current', {params: queryParams});\r\n  }\r\n\r\n  getNextTicket(): Observable<TicketNumberResponse> {\r\n    return this.http.get<TicketNumberResponse>('/distributions/tickets/next');\r\n  }\r\n\r\n}\r\n\r\nexport interface TicketNumberResponse {\r\n  ticketNumber: number;\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\common\\security\\authentication.service.spec.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 50,
        "column": 48,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 50,
        "endColumn": 61
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 178,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 178,
        "endColumn": 40,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\r\nimport {TestBed} from '@angular/core/testing';\r\nimport {Router} from '@angular/router';\r\n\r\nimport {AuthenticationService} from './authentication.service';\r\n\r\ndescribe('AuthenticationService', () => {\r\n  let httpMock: HttpTestingController;\r\n\r\n  let router: jasmine.SpyObj<Router>;\r\n  let service: AuthenticationService;\r\n\r\n  beforeEach(() => {\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [\r\n        AuthenticationService,\r\n        {\r\n          provide: Router,\r\n          useValue: routerSpy\r\n        }\r\n      ],\r\n    });\r\n\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    service = TestBed.inject(AuthenticationService);\r\n  });\r\n\r\n  it('login successful', async () => {\r\n    const loginResponseBody = {passwordChangeRequired: false};\r\n    const userInfoResponseBody = {username: 'test-user', permissions: ['PERM1']};\r\n\r\n    service.login('USER', 'PWD').then(response => {\r\n      expect(response).toEqual({successful: true, passwordChangeRequired: false});\r\n      expect(service.userInfo.username).toBe(userInfoResponseBody.username);\r\n      expect(service.userInfo.permissions).toEqual(userInfoResponseBody.permissions);\r\n    });\r\n\r\n    const mockLoginReq = httpMock.expectOne('/login');\r\n    expect(mockLoginReq.request.method).toBe('POST');\r\n    expect(mockLoginReq.request.headers.get('Authorization')).toBe('Basic ' + btoa('USER:PWD'));\r\n\r\n    const mockLoginResponse = {status: 200, statusText: 'OK'};\r\n    mockLoginReq.flush(loginResponseBody, mockLoginResponse);\r\n\r\n    const mockUserInfoReq = httpMock.expectOne('/users/info');\r\n    expect(mockUserInfoReq.request.method).toBe('GET');\r\n\r\n    const mockUserInfoResponse = {status: 200, statusText: 'OK'};\r\n    mockUserInfoReq.flush(userInfoResponseBody, mockUserInfoResponse);\r\n\r\n    httpMock.verify();\r\n\r\n    expect(router.navigate).not.toHaveBeenCalledWith(['login/passwortaendern']);\r\n  });\r\n\r\n  it('login successful but passwordchange is required', async () => {\r\n    const loginResponseBody = {passwordChangeRequired: true};\r\n    const userInfoResponseBody = {username: 'test-user', permissions: []};\r\n\r\n    service.login('USER', 'PWD').then(response => {\r\n      expect(response).toEqual({successful: true, passwordChangeRequired: true});\r\n      expect(service.userInfo.username).toBe(userInfoResponseBody.username);\r\n      expect(service.userInfo.permissions).toEqual(userInfoResponseBody.permissions);\r\n    });\r\n\r\n    const loginMockReq = httpMock.expectOne('/login');\r\n    expect(loginMockReq.request.method).toBe('POST');\r\n    expect(loginMockReq.request.headers.get('Authorization')).toBe('Basic ' + btoa('USER:PWD'));\r\n\r\n    const loginMockResponse = {status: 200, statusText: 'OK'};\r\n    loginMockReq.flush(loginResponseBody, loginMockResponse);\r\n\r\n    const mockUserInfoReq = httpMock.expectOne('/users/info');\r\n    expect(mockUserInfoReq.request.method).toBe('GET');\r\n\r\n    const mockUserInfoResponse = {status: 200, statusText: 'OK'};\r\n    mockUserInfoReq.flush(userInfoResponseBody, mockUserInfoResponse);\r\n\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('login failed', async () => {\r\n    service.userInfo = {username: 'test123', permissions: []};\r\n\r\n    service.login('USER', 'PWD').then(response => {\r\n      expect(response).toEqual({successful: false, passwordChangeRequired: false});\r\n      // check if it's reset\r\n      expect(service.userInfo).toBeNull();\r\n    });\r\n\r\n    const loginMockReq = httpMock.expectOne('/login');\r\n    expect(loginMockReq.request.method).toBe('POST');\r\n    expect(loginMockReq.request.headers.get('Authorization')).toBe('Basic ' + btoa('USER:PWD'));\r\n\r\n    const loginMockResponse = {status: 403, statusText: 'Forbidden'};\r\n    loginMockReq.flush(null, loginMockResponse);\r\n\r\n    httpMock.expectNone('/users/info');\r\n\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('redirectToLogin without msgKey', () => {\r\n    service.redirectToLogin();\r\n\r\n    expect(router.navigate).toHaveBeenCalledWith(['login']);\r\n  });\r\n\r\n  it('redirectToLogin with msgKey', () => {\r\n    service.redirectToLogin('key123');\r\n\r\n    expect(router.navigate).toHaveBeenCalledWith(['login', 'key123']);\r\n  });\r\n\r\n  it('hasPermission - permission exists', () => {\r\n    service.userInfo = {username: 'test123', permissions: ['PERM1']};\r\n\r\n    const hasPermission = service.hasPermission('PERM1');\r\n\r\n    expect(hasPermission).toBeTrue();\r\n  });\r\n\r\n  it('hasPermission - permission doesnt exist', () => {\r\n    service.userInfo = {username: 'test123', permissions: ['PERM2']};\r\n\r\n    const hasPermission = service.hasPermission('PERM1');\r\n\r\n    expect(hasPermission).toBeFalse();\r\n  });\r\n\r\n  it('hasPermission - no permissions given', () => {\r\n    service.userInfo = {username: 'test123', permissions: []};\r\n\r\n    const hasPermission = service.hasPermission('PERM1');\r\n\r\n    expect(hasPermission).toBeFalse();\r\n  });\r\n\r\n  it('getUsername - authenticated', () => {\r\n    service.userInfo = {username: 'test-user', permissions: []};\r\n\r\n    const username = service.getUsername();\r\n\r\n    expect(username).toBe('test-user');\r\n  });\r\n\r\n  it('getUsername - not authenticated', () => {\r\n    const username = service.getUsername();\r\n\r\n    expect(username).toEqual(undefined);\r\n  });\r\n\r\n  it('hasAnyPermission - no permissions', () => {\r\n    service.userInfo = {username: 'test-user', permissions: []};\r\n\r\n    const hasAnyPermission = service.hasAnyPermission();\r\n\r\n    expect(hasAnyPermission).toBeFalse();\r\n  });\r\n\r\n  it('hasAnyPermission - given permissions', () => {\r\n    service.userInfo = {username: 'test-user', permissions: ['PERM1']};\r\n\r\n    const hasAnyPermission = service.hasAnyPermission();\r\n\r\n    expect(hasAnyPermission).toBeTrue();\r\n  });\r\n\r\n  it('logout', () => {\r\n    service.userInfo = {username: 'test-user', permissions: ['PERM1']};\r\n\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    service.logout().subscribe(response => {\r\n      expect(service.userInfo).toBeNull();\r\n    });\r\n\r\n    const mockReq = httpMock.expectOne('/users/logout');\r\n    expect(mockReq.request.method).toBe('POST');\r\n\r\n    const mockErrorResponse = {status: 200, statusText: 'OK'};\r\n    mockReq.flush(null, mockErrorResponse);\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('isAuthenticated true', () => {\r\n    service.userInfo = {username: 'test-user', permissions: ['PERM1']};\r\n\r\n    const isAuthenticated = service.isAuthenticated();\r\n\r\n    expect(isAuthenticated).toBeTruthy();\r\n  });\r\n\r\n  it('isAuthenticated false', () => {\r\n    service.userInfo = null;\r\n\r\n    const isAuthenticated = service.isAuthenticated();\r\n\r\n    expect(isAuthenticated).toBeFalsy();\r\n  });\r\n\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\common\\util\\url-helper.service.ts",
    "messages": [
      {
        "ruleId": "sonarjs/prefer-immediate-return",
        "severity": 2,
        "message": "Immediately return this expression instead of assigning it to the temporary variable \"absoluteUrl\".",
        "line": 24,
        "column": 25,
        "nodeType": "BinaryExpression",
        "messageId": "doImmediateAction",
        "endLine": 24,
        "endColumn": 39,
        "fix": {
          "range": [
            645,
            704
          ],
          "text": "return baseUrl + path"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import {Injectable} from '@angular/core';\r\nimport {PlatformLocation} from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UrlHelperService {\r\n\r\n  constructor(private platformLocation: PlatformLocation) {\r\n  }\r\n\r\n  getBaseUrl(): string {\r\n    let pathname = this.platformLocation.pathname;\r\n    if (pathname === '/') {\r\n      pathname = '';\r\n    }\r\n    if (pathname.endsWith('/')) {\r\n      pathname = pathname.slice(0, -1);\r\n    }\r\n\r\n    const baseUrl = this.platformLocation.protocol + '//' + this.platformLocation.hostname + ':' + this.platformLocation.port;\r\n    const path = pathname.replaceAll('//', '/');\r\n\r\n    const absoluteUrl = baseUrl + path;\r\n    return absoluteUrl;\r\n  }\r\n\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\common\\validator\\CustomValidator.ts",
    "messages": [
      {
        "ruleId": "sonarjs/prefer-immediate-return",
        "severity": 2,
        "message": "Immediately return this expression instead of assigning it to the temporary variable \"result\".",
        "line": 19,
        "column": 22,
        "nodeType": "ConditionalExpression",
        "messageId": "doImmediateAction",
        "endLine": 24,
        "endColumn": 8,
        "fix": {
          "range": [
            536,
            784
          ],
          "text": "return !controlDate.isBefore(validationDate) ? null : {\r\n        'mindate': {\r\n          'minimumDate': validationDate.format('DD.MM.YYYY'),\r\n          'actualDate': controlDate.format('DD.MM.YYYY')\r\n        }\r\n      }"
        }
      },
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 4 times.",
        "line": 21,
        "column": 48,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 21,
        "endColumn": 60
      },
      {
        "ruleId": "sonarjs/prefer-immediate-return",
        "severity": 2,
        "message": "Immediately return this expression instead of assigning it to the temporary variable \"result\".",
        "line": 42,
        "column": 22,
        "nodeType": "ConditionalExpression",
        "messageId": "doImmediateAction",
        "endLine": 47,
        "endColumn": 8,
        "fix": {
          "range": [
            1187,
            1434
          ],
          "text": "return !controlDate.isAfter(validationDate) ? null : {\r\n        'maxdate': {\r\n          'maximumDate': validationDate.format('DD.MM.YYYY'),\r\n          'actualDate': controlDate.format('DD.MM.YYYY')\r\n        }\r\n      }"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\r\nimport * as moment from 'moment';\r\n\r\nexport class CustomValidator {\r\n\r\n  static minDate(date: Date): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (control.value == null) {\r\n        return null;\r\n      }\r\n\r\n      const controlDate = moment(control.value).startOf('day');\r\n      if (!controlDate.isValid()) {\r\n        return null;\r\n      }\r\n\r\n      const validationDate = moment(date).startOf('day');\r\n\r\n      const result = !controlDate.isBefore(validationDate) ? null : {\r\n        'mindate': {\r\n          'minimumDate': validationDate.format('DD.MM.YYYY'),\r\n          'actualDate': controlDate.format('DD.MM.YYYY')\r\n        }\r\n      };\r\n      return result;\r\n    };\r\n  }\r\n\r\n  static maxDate(date: Date): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (control.value == null) {\r\n        return null;\r\n      }\r\n\r\n      const controlDate = moment(control.value).startOf('day');\r\n      if (!controlDate.isValid()) {\r\n        return null;\r\n      }\r\n\r\n      const validationDate = moment(date).startOf('day');\r\n\r\n      const result = !controlDate.isAfter(validationDate) ? null : {\r\n        'maxdate': {\r\n          'maximumDate': validationDate.format('DD.MM.YYYY'),\r\n          'actualDate': controlDate.format('DD.MM.YYYY')\r\n        }\r\n      };\r\n      return result;\r\n    };\r\n  }\r\n\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\modules\\checkin\\checkin\\checkin.component.spec.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 10 times.",
        "line": 259,
        "column": 17,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 259,
        "endColumn": 29
      },
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 10 times.",
        "line": 266,
        "column": 17,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 266,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {TestBed, waitForAsync} from '@angular/core/testing';\r\nimport {CheckinComponent, CustomerState} from './checkin.component';\r\nimport {WebsocketService} from '../../../common/websocket/websocket.service';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CustomerApiService} from '../../../api/customer-api.service';\r\nimport {BehaviorSubject, EMPTY, of, throwError} from 'rxjs';\r\nimport {IMessage} from '@stomp/stompjs';\r\nimport * as moment from 'moment/moment';\r\nimport {ScannerList, ScanResult} from '../scanner/scanner.component';\r\nimport {CustomerNoteApiService, CustomerNotesResponse} from '../../../api/customer-note-api.service';\r\nimport {GlobalStateService} from '../../../common/state/global-state.service';\r\nimport {Router} from '@angular/router';\r\nimport {DistributionApiService, DistributionItem} from '../../../api/distribution-api.service';\r\nimport {RouterTestingModule} from '@angular/router/testing';\r\nimport {BadgeModule, CardModule, ColComponent, ModalModule, RowComponent} from '@coreui/angular';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {ChangeDetectorRef, ElementRef} from '@angular/core';\r\nimport {ToastService, ToastType} from '../../../common/views/default-layout/toasts/toast.service';\r\nimport {DistributionTicketApiService} from '../../../api/distribution-ticket-api.service';\r\n\r\ndescribe('CheckinComponent', () => {\r\n  let customerApiService: jasmine.SpyObj<CustomerApiService>;\r\n  let customerNoteApiService: jasmine.SpyObj<CustomerNoteApiService>;\r\n  let wsService: jasmine.SpyObj<WebsocketService>;\r\n  let globalStateService: jasmine.SpyObj<GlobalStateService>;\r\n  let distributionApiService: jasmine.SpyObj<DistributionApiService>;\r\n  let distributionTicketApiService: jasmine.SpyObj<DistributionTicketApiService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n  let toastService: jasmine.SpyObj<ToastService>;\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    const customerApiServiceSpy = jasmine.createSpyObj('CustomerApiService', ['getCustomer']);\r\n    const customerNoteApiServiceSpy = jasmine.createSpyObj('CustomerNoteApiService', ['getNotesForCustomer']);\r\n    const wsServiceSpy = jasmine.createSpyObj('WebsocketService',\r\n      ['init', 'connect', 'watch', 'close']\r\n    );\r\n    const globalStateServiceSpy = jasmine.createSpyObj('GlobalStateService', ['getCurrentDistribution']);\r\n    const distributionApiServiceSpy = jasmine.createSpyObj('DistributionApiService', ['assignCustomer']);\r\n    const distributionTicketApiServiceSpy = jasmine.createSpyObj('DistributionTicketApiService', ['getCurrentTicketForCustomer', 'deleteCurrentTicketOfCustomer']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n    const toastServiceSpy = jasmine.createSpyObj('ToastService', ['showToast']);\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        CommonModule,\r\n        RouterTestingModule,\r\n        FormsModule,\r\n        ModalModule,\r\n        RowComponent,\r\n        ColComponent,\r\n        CardModule,\r\n        BadgeModule\r\n      ],\r\n      declarations: [CheckinComponent],\r\n      providers: [\r\n        {\r\n          provide: CustomerApiService,\r\n          useValue: customerApiServiceSpy\r\n        },\r\n        {\r\n          provide: CustomerNoteApiService,\r\n          useValue: customerNoteApiServiceSpy\r\n        },\r\n        {\r\n          provide: WebsocketService,\r\n          useValue: wsServiceSpy\r\n        },\r\n        {\r\n          provide: GlobalStateService,\r\n          useValue: globalStateServiceSpy\r\n        },\r\n        {\r\n          provide: DistributionApiService,\r\n          useValue: distributionApiServiceSpy\r\n        },\r\n        {\r\n          provide: DistributionTicketApiService,\r\n          useValue: distributionTicketApiServiceSpy\r\n        },\r\n        {\r\n          provide: Router,\r\n          useValue: routerSpy\r\n        },\r\n        {\r\n          provide: ToastService,\r\n          useValue: toastServiceSpy\r\n        }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    customerApiService = TestBed.inject(CustomerApiService) as jasmine.SpyObj<CustomerApiService>;\r\n    customerNoteApiService = TestBed.inject(CustomerNoteApiService) as jasmine.SpyObj<CustomerNoteApiService>;\r\n    wsService = TestBed.inject(WebsocketService) as jasmine.SpyObj<WebsocketService>;\r\n    globalStateService = TestBed.inject(GlobalStateService) as jasmine.SpyObj<GlobalStateService>;\r\n    distributionApiService = TestBed.inject(DistributionApiService) as jasmine.SpyObj<DistributionApiService>;\r\n    distributionTicketApiService = TestBed.inject(DistributionTicketApiService) as jasmine.SpyObj<DistributionTicketApiService>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    toastService = TestBed.inject(ToastService) as jasmine.SpyObj<ToastService>;\r\n  }));\r\n\r\n  it('component can be created', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('ngOnInit', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    const scannersResponse: ScannerList = {scannerIds: [1, 2, 3]};\r\n    const scannersMessage: IMessage = {\r\n      body: JSON.stringify(scannersResponse),\r\n      ack: null,\r\n      nack: null,\r\n      headers: null,\r\n      command: null,\r\n      binaryBody: null,\r\n      isBinaryBody: false\r\n    };\r\n    wsService.watch.and.returnValue(of(scannersMessage));\r\n\r\n    const testDistribution = {\r\n      id: 123,\r\n      state: {\r\n        name: 'OPEN',\r\n        stateLabel: 'Offen',\r\n        actionLabel: 'Offen'\r\n      }\r\n    };\r\n    globalStateService.getCurrentDistribution.and.returnValue(new BehaviorSubject<DistributionItem>(testDistribution));\r\n\r\n    component.ngOnInit();\r\n\r\n    expect(wsService.watch).toHaveBeenCalledWith('/topic/scanners');\r\n    expect(component.scannerIds).toEqual(scannersResponse.scannerIds);\r\n  });\r\n\r\n  it('ngOnInit without ongoing distribution navigates to dashboard', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    wsService.watch.and.returnValue(EMPTY);\r\n    globalStateService.getCurrentDistribution.and.returnValue(new BehaviorSubject<DistributionItem>(null));\r\n\r\n    component.ngOnInit();\r\n\r\n    expect(router.navigate).toHaveBeenCalledWith(['uebersicht']);\r\n  });\r\n\r\n  it('ngOnDestroy with active subscription', () => {\r\n    const testSubscription = jasmine.createSpyObj('Subscription', ['unsubscribe']);\r\n\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.scannerSubscription = testSubscription;\r\n\r\n    component.ngOnDestroy();\r\n\r\n    expect(component.scannerSubscription.unsubscribe).toHaveBeenCalled();\r\n  });\r\n\r\n  it('selectedScannerId first time selected', () => {\r\n    customerApiService.getCustomer.and.returnValue(EMPTY);\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(EMPTY);\r\n\r\n    const customerId = 11111;\r\n    const scanResult: ScanResult = {value: customerId};\r\n    const scanResultMessage: IMessage = {\r\n      body: JSON.stringify(scanResult),\r\n      ack: null,\r\n      nack: null,\r\n      headers: null,\r\n      command: null,\r\n      binaryBody: null,\r\n      isBinaryBody: false\r\n    };\r\n    wsService.watch.and.returnValue(of(scanResultMessage));\r\n\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    expect(component.currentScannerId).toBeUndefined();\r\n    expect(component.customerId).toBeUndefined();\r\n    expect(component.scannerReadyState).toBeFalsy();\r\n\r\n    const newScannerId = 123;\r\n    component.selectedScannerId = newScannerId;\r\n\r\n    expect(component.currentScannerId).toBe(newScannerId);\r\n    expect(component.customerId).toBe(customerId);\r\n    expect(component.scannerReadyState).toBeTruthy();\r\n    expect(wsService.watch).toHaveBeenCalledWith(`/topic/scanners/${newScannerId}/results`);\r\n    expect(customerApiService.getCustomer).toHaveBeenCalled();\r\n  });\r\n\r\n  it('selectedScannerId removed scanner', () => {\r\n    const testSubscription = jasmine.createSpyObj('Subscription', ['unsubscribe']);\r\n\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.currentScannerId = 123;\r\n    component.customerId = 1111;\r\n    component.scannerReadyState = true;\r\n    component.scannerSubscription = testSubscription;\r\n\r\n    component.selectedScannerId = undefined;\r\n\r\n    expect(component.currentScannerId).toBeUndefined();\r\n    expect(component.customerId).not.toBeUndefined();\r\n    expect(component.scannerReadyState).toBeFalsy();\r\n    expect(testSubscription.unsubscribe).toHaveBeenCalled();\r\n    expect(wsService.watch).not.toHaveBeenCalled();\r\n    expect(customerApiService.getCustomer).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('selectedScannerId switch to another scanner', () => {\r\n    const testSubscription = jasmine.createSpyObj('Subscription', ['unsubscribe']);\r\n    wsService.watch.and.returnValue(EMPTY);\r\n\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.currentScannerId = 123;\r\n    component.customerId = 1111;\r\n    component.scannerReadyState = true;\r\n    component.scannerSubscription = testSubscription;\r\n\r\n    const newScannerId = 456;\r\n    component.selectedScannerId = newScannerId;\r\n\r\n    expect(component.currentScannerId).toBe(newScannerId);\r\n    expect(component.scannerReadyState).toBeTruthy();\r\n    expect(testSubscription.unsubscribe).toHaveBeenCalled();\r\n    expect(wsService.watch).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searchForCustomerId found valid customer', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumber = 123;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    customerApiService.getCustomer.and.returnValue(of(mockCustomer));\r\n    const notesResponse: CustomerNotesResponse = {notes: []};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    component.customerId = mockCustomer.id;\r\n    distributionTicketApiService.getCurrentTicketForCustomer.and.returnValue(of({ticketNumber: null}));\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customer).toEqual(mockCustomer);\r\n    expect(customerApiService.getCustomer).toHaveBeenCalledWith(mockCustomer.id);\r\n\r\n    expect(component.customerState).toBe(CustomerState.GREEN);\r\n    expect(component.customerStateText).toBe('GÜLTIG');\r\n\r\n    expect(component.ticketNumber).toBeUndefined();\r\n    expect(component.ticketNumberEdit).toBeFalse();\r\n    expect(component.ticketNumberInputRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searchForCustomerId found valid customer with assigned ticket', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumber = 123;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    customerApiService.getCustomer.and.returnValue(of(mockCustomer));\r\n    const notesResponse: CustomerNotesResponse = {notes: []};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    component.customerId = mockCustomer.id;\r\n\r\n    const testTicketNumber = 123;\r\n    distributionTicketApiService.getCurrentTicketForCustomer.and.returnValue(of({ticketNumber: testTicketNumber}));\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customer).toEqual(mockCustomer);\r\n    expect(customerApiService.getCustomer).toHaveBeenCalledWith(mockCustomer.id);\r\n\r\n    expect(component.customerState).toBe(CustomerState.GREEN);\r\n    expect(component.customerStateText).toBe('GÜLTIG');\r\n\r\n    expect(component.ticketNumber).toBe(testTicketNumber);\r\n    expect(component.ticketNumberEdit).toBeTrue();\r\n    expect(component.ticketNumberInputRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searchForCustomerId found valid customer but expires soon', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(2, 'weeks').startOf('day').utc().toDate()\r\n    };\r\n    customerApiService.getCustomer.and.returnValue(of(mockCustomer));\r\n    const notesResponse: CustomerNotesResponse = {notes: []};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    component.customerId = mockCustomer.id;\r\n    distributionTicketApiService.getCurrentTicketForCustomer.and.returnValue(of({ticketNumber: null}));\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customer).toEqual(mockCustomer);\r\n    expect(customerApiService.getCustomer).toHaveBeenCalledWith(mockCustomer.id);\r\n\r\n    expect(component.customerState).toBe(CustomerState.YELLOW);\r\n    expect(component.customerStateText).toBe('GÜLTIG - läuft bald ab');\r\n    expect(component.ticketNumberInputRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searchForCustomerId found invalid customer', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n    component.cancelButtonRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.cancelButtonRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().subtract(2, 'weeks').startOf('day').utc().toDate()\r\n    };\r\n    customerApiService.getCustomer.and.returnValue(of(mockCustomer));\r\n    const notesResponse: CustomerNotesResponse = {notes: []};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    component.customerId = mockCustomer.id;\r\n    distributionTicketApiService.getCurrentTicketForCustomer.and.returnValue(of({ticketNumber: null}));\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customer).toEqual(mockCustomer);\r\n    expect(customerApiService.getCustomer).toHaveBeenCalledWith(mockCustomer.id);\r\n\r\n    expect(component.customerState).toBe(CustomerState.RED);\r\n    expect(component.customerStateText).toBe('UNGÜLTIG');\r\n    expect(component.ticketNumberInputRef.nativeElement.focus).not.toHaveBeenCalled();\r\n    expect(component.cancelButtonRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searchForCustomerId found locked customer', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n    component.cancelButtonRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.cancelButtonRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n      locked: true,\r\n\r\n      validUntil: moment().subtract(2, 'weeks').startOf('day').utc().toDate()\r\n    };\r\n    customerApiService.getCustomer.and.returnValue(of(mockCustomer));\r\n    const notesResponse: CustomerNotesResponse = {notes: []};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    component.customerId = mockCustomer.id;\r\n    distributionTicketApiService.getCurrentTicketForCustomer.and.returnValue(of({ticketNumber: null}));\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customer).toEqual(mockCustomer);\r\n    expect(customerApiService.getCustomer).toHaveBeenCalledWith(mockCustomer.id);\r\n\r\n    expect(component.customerState).toBe(CustomerState.RED);\r\n    expect(component.customerStateText).toBe('GESPERRT');\r\n    expect(component.ticketNumberInputRef.nativeElement.focus).not.toHaveBeenCalled();\r\n    expect(component.cancelButtonRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searchForCustomerId customer not found', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    customerApiService.getCustomer.and.returnValue(throwError(() => {\r\n      return {status: 404};\r\n    }));\r\n    const notesResponse: CustomerNotesResponse = {notes: []};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    const testCustomerId = 1234;\r\n    component.customerId = testCustomerId;\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customer).toBeUndefined();\r\n    expect(customerApiService.getCustomer).toHaveBeenCalledWith(testCustomerId);\r\n  });\r\n\r\n  it('searchForCustomerId found notes', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    customerApiService.getCustomer.and.returnValue(of(mockCustomer));\r\n\r\n    const mockNotes = [\r\n      {\r\n        author: 'author1',\r\n        timestamp: moment('2023-03-22T19:45:25.615477+01:00').toDate(),\r\n        note: 'note from author 2'\r\n      },\r\n      {\r\n        author: 'author2',\r\n        timestamp: moment('2023-03-20T19:45:25.615477+01:00').toDate(),\r\n        note: 'note from author 1'\r\n      }\r\n    ];\r\n    const notesResponse: CustomerNotesResponse = {notes: mockNotes};\r\n    customerNoteApiService.getNotesForCustomer.and.returnValue(of(notesResponse));\r\n    distributionTicketApiService.getCurrentTicketForCustomer.and.returnValue(of({ticketNumber: null}));\r\n\r\n    component.searchForCustomerId();\r\n\r\n    expect(component.customerNotes).toEqual(mockNotes);\r\n  });\r\n\r\n  it('reset customer', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n    component.customerIdInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.customerIdInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    component.processCustomer(mockCustomer);\r\n\r\n    component.cancel();\r\n\r\n    expect(component.customerId).toBeUndefined();\r\n    expect(component.customerState).toBeUndefined();\r\n    expect(component.customerStateText).toBeUndefined();\r\n    expect(component.customerNotes).toBeDefined();\r\n    expect(component.customerNotes.length).toBe(0);\r\n    expect(component.customerIdInputRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('assign customer', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n    component.customerIdInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.customerIdInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    component.processCustomer(mockCustomer);\r\n\r\n    const ticketNumber = 55;\r\n    component.ticketNumber = ticketNumber;\r\n\r\n    distributionApiService.assignCustomer.and.returnValue(of(null));\r\n\r\n    component.assignCustomer();\r\n\r\n    expect(distributionApiService.assignCustomer).toHaveBeenCalledWith(mockCustomer.id, ticketNumber);\r\n\r\n    expect(component.customerId).toBeUndefined();\r\n    expect(component.customerState).toBeUndefined();\r\n    expect(component.customerStateText).toBeUndefined();\r\n    expect(component.customerNotes).toBeDefined();\r\n    expect(component.customerNotes.length).toBe(0);\r\n    expect(component.ticketNumber).toBeUndefined();\r\n    expect(component.customerIdInputRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n  it('assign customer ignored without proper value', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    component.processCustomer(mockCustomer);\r\n\r\n    component.ticketNumber = undefined;\r\n\r\n    component.assignCustomer();\r\n\r\n    expect(distributionApiService.assignCustomer).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('delete ticket successful', () => {\r\n    const fixture = TestBed.createComponent(CheckinComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ticketNumberInputRef = new ElementRef({\r\n      /* eslint-disable @typescript-eslint/no-empty-function */\r\n      focus() {\r\n      }\r\n    });\r\n    spyOn(component.ticketNumberInputRef.nativeElement, 'focus');\r\n\r\n    const changeDetectorRef = fixture.debugElement.injector.get(ChangeDetectorRef);\r\n    spyOn(changeDetectorRef.constructor.prototype, 'detectChanges');\r\n\r\n    const mockCustomer = {\r\n      id: 133,\r\n      lastname: 'Mustermann',\r\n      firstname: 'Max',\r\n      birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n\r\n      address: {\r\n        street: 'Teststraße',\r\n        houseNumber: '123A',\r\n        door: '21',\r\n        postalCode: 1020,\r\n        city: 'Wien',\r\n      },\r\n\r\n      employer: 'test employer',\r\n      income: 1000,\r\n\r\n      validUntil: moment().add(3, 'months').startOf('day').utc().toDate()\r\n    };\r\n    component.processCustomer(mockCustomer);\r\n    distributionTicketApiService.deleteCurrentTicketOfCustomer.and.returnValue(of(null));\r\n\r\n    component.deleteTicket();\r\n\r\n    expect(distributionTicketApiService.deleteCurrentTicketOfCustomer).toHaveBeenCalledWith(mockCustomer.id);\r\n    expect(component.ticketNumber).toBeUndefined();\r\n    expect(component.ticketNumberEdit).toBeUndefined();\r\n    expect(toastService.showToast).toHaveBeenCalledWith({type: ToastType.SUCCESS, title: 'Ticket-Nummer gelöscht!'});\r\n    expect(component.ticketNumberInputRef.nativeElement.focus).toHaveBeenCalled();\r\n  });\r\n\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\modules\\checkin\\checkin\\checkin.component.ts",
    "messages": [
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'length' is never reassigned. Use 'const' instead.",
        "line": 138,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 138,
        "endColumn": 15,
        "fix": {
          "range": [
            4977,
            5118
          ],
          "text": "const length = this.customer.additionalPersons.filter((person) => {\r\n      return moment().diff(person.birthDate, 'years') < 3;\r\n    }).length;"
        }
      },
      {
        "ruleId": "sonarjs/prefer-immediate-return",
        "severity": 2,
        "message": "Immediately return this expression instead of assigning it to the temporary variable \"length\".",
        "line": 138,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "doImmediateAction",
        "endLine": 140,
        "endColumn": 14,
        "fix": {
          "range": [
            4977,
            5137
          ],
          "text": "return this.customer.additionalPersons.filter((person) => {\r\n      return moment().diff(person.birthDate, 'years') < 3;\r\n    }).length"
        }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'response' is defined but never used.",
        "line": 196,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 196,
        "endColumn": 24,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import {ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {CustomerApiService, CustomerData} from '../../../api/customer-api.service';\r\nimport {WebsocketService} from '../../../common/websocket/websocket.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {IMessage} from '@stomp/stompjs';\r\nimport * as moment from 'moment';\r\nimport {ScannerList} from '../scanner/scanner.component';\r\nimport {CustomerNoteApiService, CustomerNoteItem} from '../../../api/customer-note-api.service';\r\nimport {GlobalStateService} from '../../../common/state/global-state.service';\r\nimport {Router} from '@angular/router';\r\nimport {DistributionApiService} from '../../../api/distribution-api.service';\r\nimport {Colors} from '@coreui/angular';\r\nimport {DistributionTicketApiService} from '../../../api/distribution-ticket-api.service';\r\nimport {ToastService, ToastType} from '../../../common/views/default-layout/toasts/toast.service';\r\n\r\n@Component({\r\n  selector: 'tafel-checkin',\r\n  templateUrl: 'checkin.component.html'\r\n})\r\nexport class CheckinComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(\r\n    private customerApiService: CustomerApiService,\r\n    private customerNoteApiService: CustomerNoteApiService,\r\n    private websocketService: WebsocketService,\r\n    private globalStateService: GlobalStateService,\r\n    private distributionApiService: DistributionApiService,\r\n    private distributionTicketApiService: DistributionTicketApiService,\r\n    private router: Router,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private toastService: ToastService\r\n  ) {\r\n  }\r\n\r\n  private VALID_UNTIL_WARNLIMIT_WEEKS = 8;\r\n\r\n  scannerIds: number[];\r\n  currentScannerId: number;\r\n  scannerReadyState: boolean;\r\n  scannerSubscription: Subscription;\r\n\r\n  customerId: number;\r\n  customer: CustomerData;\r\n  customerState: CustomerState;\r\n  customerStateText: string;\r\n\r\n  customerNotes: CustomerNoteItem[];\r\n  ticketNumber: number;\r\n  ticketNumberEdit = false;\r\n\r\n  @ViewChild('customerIdInput') customerIdInputRef: ElementRef;\r\n  @ViewChild('ticketNumberInput') ticketNumberInputRef: ElementRef;\r\n  @ViewChild('cancelButton') cancelButtonRef: ElementRef;\r\n\r\n  ngOnInit(): void {\r\n    if (this.globalStateService.getCurrentDistribution().value === null) {\r\n      this.router.navigate(['uebersicht']);\r\n    }\r\n\r\n    this.websocketService.watch('/topic/scanners').subscribe((message: IMessage) => {\r\n      const scanners: ScannerList = JSON.parse(message.body);\r\n      this.scannerIds = scanners.scannerIds;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.scannerSubscription) {\r\n      this.scannerSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  searchForCustomerId() {\r\n    const observer = {\r\n      next: (customerData: CustomerData) => {\r\n        this.processCustomer(customerData);\r\n\r\n        this.customerNoteApiService.getNotesForCustomer(this.customerId).subscribe(notesResponse => {\r\n          this.customerNotes = notesResponse.notes;\r\n        });\r\n\r\n        this.distributionTicketApiService.getCurrentTicketForCustomer(customerData.id).subscribe((ticketNumberResponse) => {\r\n          if (ticketNumberResponse.ticketNumber) {\r\n            this.ticketNumber = ticketNumberResponse.ticketNumber;\r\n          }\r\n          this.ticketNumberEdit = this.ticketNumber != null;\r\n        });\r\n      },\r\n      error: error => {\r\n        if (error.status === 404) {\r\n          this.processCustomer(undefined);\r\n          this.customerNotes = [];\r\n        }\r\n      },\r\n    };\r\n    this.customerApiService.getCustomer(this.customerId).subscribe(observer);\r\n  }\r\n\r\n  processCustomer(customer: CustomerData) {\r\n    this.ticketNumber = undefined;\r\n    this.customer = customer;\r\n\r\n    if (customer) {\r\n      const validUntil = moment(customer.validUntil).startOf('day');\r\n      const now = moment().startOf('day');\r\n\r\n      if (customer.locked) {\r\n        this.customerState = CustomerState.RED;\r\n        this.customerStateText = 'GESPERRT';\r\n\r\n        this.changeDetectorRef.detectChanges();\r\n        this.cancelButtonRef.nativeElement.focus();\r\n      } else if (validUntil.isBefore(now)) {\r\n        this.customerState = CustomerState.RED;\r\n        this.customerStateText = 'UNGÜLTIG';\r\n\r\n        this.changeDetectorRef.detectChanges();\r\n        this.cancelButtonRef.nativeElement.focus();\r\n      } else {\r\n        const warnLimit = now.add(this.VALID_UNTIL_WARNLIMIT_WEEKS, 'weeks');\r\n        if (!validUntil.isAfter(warnLimit)) {\r\n          this.customerState = CustomerState.YELLOW;\r\n          this.customerStateText = 'GÜLTIG - läuft bald ab';\r\n        } else {\r\n          this.customerState = CustomerState.GREEN;\r\n          this.customerStateText = 'GÜLTIG';\r\n        }\r\n\r\n        this.changeDetectorRef.detectChanges();\r\n        this.ticketNumberInputRef.nativeElement.focus();\r\n      }\r\n    } else {\r\n      this.customerState = undefined;\r\n      this.customerStateText = undefined;\r\n    }\r\n  }\r\n\r\n  getInfantCount(): number {\r\n    let length = this.customer.additionalPersons.filter((person) => {\r\n      return moment().diff(person.birthDate, 'years') < 3;\r\n    }).length;\r\n    return length;\r\n  }\r\n\r\n  get selectedScannerId(): number {\r\n    return this.currentScannerId;\r\n  }\r\n\r\n  set selectedScannerId(scannerId: number) {\r\n    this.currentScannerId = scannerId;\r\n    if (this.scannerSubscription) {\r\n      this.scannerSubscription.unsubscribe();\r\n    }\r\n    this.scannerReadyState = false;\r\n\r\n    if (scannerId) {\r\n      this.scannerSubscription = this.websocketService.watch(`/topic/scanners/${this.currentScannerId}/results`)\r\n        .subscribe((message: IMessage) => {\r\n          const result: ScanResult = JSON.parse(message.body);\r\n          this.customerId = result.value;\r\n          this.searchForCustomerId();\r\n        });\r\n\r\n      this.scannerReadyState = true;\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.processCustomer(undefined);\r\n    this.customerNotes = [];\r\n    this.customerId = undefined;\r\n    this.ticketNumber = undefined;\r\n    this.ticketNumberEdit = undefined;\r\n    this.customerIdInputRef.nativeElement.focus();\r\n  }\r\n\r\n  formatAddress(): string {\r\n    if (this.customer) {\r\n      const address = this.customer.address;\r\n      let result = '';\r\n      result += address.street + ' ' + address.houseNumber;\r\n      if (address.stairway) {\r\n        result += ', Stiege ' + address.stairway;\r\n      }\r\n      if (address.stairway) {\r\n        result += ', Top ' + address.door;\r\n      }\r\n      result += ' / ' + address.postalCode + ' ' + address.city;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  assignCustomer() {\r\n    if (this.ticketNumber > 0) {\r\n      /* eslint-disable @typescript-eslint/no-unused-vars */\r\n      const observer = {\r\n        next: (response) => this.cancel()\r\n      };\r\n      this.distributionApiService.assignCustomer(this.customer.id, this.ticketNumber).subscribe(observer);\r\n      this.customerIdInputRef.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  get scannerReadyStateColor(): Colors {\r\n    return this.scannerReadyState ? 'success' : 'danger';\r\n  }\r\n\r\n  get customerStateColor(): Colors {\r\n    switch (this.customerState) {\r\n      case CustomerState.RED:\r\n        return 'danger';\r\n      case CustomerState.YELLOW:\r\n        return 'warning';\r\n      case CustomerState.GREEN:\r\n        return 'success';\r\n    }\r\n  }\r\n\r\n  deleteTicket() {\r\n    const observer = {\r\n      next: () => {\r\n        this.ticketNumber = undefined;\r\n        this.ticketNumberEdit = undefined;\r\n        this.toastService.showToast({type: ToastType.SUCCESS, title: 'Ticket-Nummer gelöscht!'});\r\n        this.ticketNumberInputRef.nativeElement.focus();\r\n      }\r\n    };\r\n    this.distributionTicketApiService.deleteCurrentTicketOfCustomer(this.customer.id).subscribe(observer);\r\n  }\r\n\r\n}\r\n\r\nexport enum CustomerState {\r\n  RED, YELLOW, GREEN\r\n}\r\n\r\nexport interface ScanResult {\r\n  value: number;\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\modules\\checkin\\ticket-screen-control\\ticket-screen-control.component.spec.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 73,
        "column": 20,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 73,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {TestBed, waitForAsync} from '@angular/core/testing';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TicketScreenControlComponent} from './ticket-screen-control.component';\r\nimport {WebsocketService} from '../../../common/websocket/websocket.service';\r\nimport {DistributionTicketApiService, TicketNumberResponse} from '../../../api/distribution-ticket-api.service';\r\nimport {TicketScreenMessage} from '../ticket-screen/ticket-screen.component';\r\nimport {of} from 'rxjs';\r\nimport {UrlHelperService} from '../../../common/util/url-helper.service';\r\n\r\ndescribe('TicketScreenControlComponent', () => {\r\n  let websocketService: jasmine.SpyObj<WebsocketService>;\r\n  let distributionApiService: jasmine.SpyObj<DistributionTicketApiService>;\r\n  let urlHelperSpy: jasmine.SpyObj<UrlHelperService>;\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [CommonModule],\r\n      providers: [\r\n        {\r\n          provide: WebsocketService,\r\n          useValue: jasmine.createSpyObj('WebsocketService', ['publish'])\r\n        },\r\n        {\r\n          provide: DistributionTicketApiService,\r\n          useValue: jasmine.createSpyObj('DistributionTicketApiService', ['getCurrentTicket', 'getNextTicket'])\r\n        },\r\n        {\r\n          provide: UrlHelperService,\r\n          useValue: jasmine.createSpyObj('UrlHelperService', ['getBaseUrl'])\r\n        }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    websocketService = TestBed.inject(WebsocketService) as jasmine.SpyObj<WebsocketService>;\r\n    distributionApiService = TestBed.inject(DistributionTicketApiService) as jasmine.SpyObj<DistributionTicketApiService>;\r\n    urlHelperSpy = TestBed.inject(UrlHelperService) as jasmine.SpyObj<UrlHelperService>;\r\n  }));\r\n\r\n  it('component can be created', () => {\r\n    const fixture = TestBed.createComponent(TicketScreenControlComponent);\r\n    const component = fixture.componentInstance;\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('openScreenInNewTab', () => {\r\n    const fixture = TestBed.createComponent(TicketScreenControlComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    const testBaseUrl = 'http://test:1234/testcontext';\r\n    urlHelperSpy.getBaseUrl.and.returnValue(testBaseUrl);\r\n    spyOn(window, 'open');\r\n\r\n    component.openScreenInNewTab();\r\n\r\n    expect(window.open).toHaveBeenCalledWith(`${testBaseUrl}/#/anmeldung/ticketmonitor`, '_blank');\r\n  });\r\n\r\n  it('showStartTime', () => {\r\n    const fixture = TestBed.createComponent(TicketScreenControlComponent);\r\n    const component = fixture.componentInstance;\r\n    component.form.get('startTime').setValue('19:00');\r\n\r\n    component.showStartTime();\r\n\r\n    const expectedStartTime = new Date();\r\n    expectedStartTime.setHours(19);\r\n    expectedStartTime.setMinutes(0);\r\n    expectedStartTime.setSeconds(0);\r\n    expectedStartTime.setMilliseconds(0);\r\n    const expectedMessage: TicketScreenMessage = {startTime: expectedStartTime};\r\n\r\n    expect(websocketService.publish).toHaveBeenCalledWith({\r\n      destination: '/topic/ticket-screen',\r\n      body: JSON.stringify(expectedMessage)\r\n    });\r\n  });\r\n\r\n  it('showCurrentTicket', () => {\r\n    const fixture = TestBed.createComponent(TicketScreenControlComponent);\r\n    const component = fixture.componentInstance;\r\n    const testTicket = 123;\r\n\r\n    const response: TicketNumberResponse = {ticketNumber: testTicket};\r\n    distributionApiService.getCurrentTicket.and.returnValue(of(response));\r\n\r\n    component.showCurrentTicket();\r\n\r\n    const expectedMessage: TicketScreenMessage = {ticketNumber: testTicket};\r\n    expect(websocketService.publish).toHaveBeenCalledWith({\r\n      destination: '/topic/ticket-screen',\r\n      body: JSON.stringify(expectedMessage)\r\n    });\r\n  });\r\n\r\n  it('showNextTicket', () => {\r\n    const fixture = TestBed.createComponent(TicketScreenControlComponent);\r\n    const component = fixture.componentInstance;\r\n    const testTicket = 456;\r\n\r\n    const response: TicketNumberResponse = {ticketNumber: testTicket};\r\n    distributionApiService.getNextTicket.and.returnValue(of(response));\r\n\r\n    component.showNextTicket();\r\n\r\n    const expectedMessage: TicketScreenMessage = {ticketNumber: testTicket};\r\n    expect(websocketService.publish).toHaveBeenCalledWith({\r\n      destination: '/topic/ticket-screen',\r\n      body: JSON.stringify(expectedMessage)\r\n    });\r\n  });\r\n\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\modules\\customer\\views\\customer-detail\\customer-detail.component.spec.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 36,
        "column": 11,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 36,
        "endColumn": 23
      },
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 5 times.",
        "line": 199,
        "column": 64,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 199,
        "endColumn": 76
      },
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 241,
        "column": 33,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 241,
        "endColumn": 67
      },
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 253,
        "column": 65,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 253,
        "endColumn": 82
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {HttpHeaders, HttpResponse} from '@angular/common/http';\r\nimport {ComponentFixture, TestBed, waitForAsync} from '@angular/core/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport {of, throwError} from 'rxjs';\r\nimport {FileHelperService} from '../../../../common/util/file-helper.service';\r\nimport {CustomerApiService, CustomerData} from '../../../../api/customer-api.service';\r\nimport {CustomerDetailComponent} from './customer-detail.component';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DEFAULT_CURRENCY_CODE, LOCALE_ID} from '@angular/core';\r\nimport {CustomerNoteApiService, CustomerNoteItem} from '../../../../api/customer-note-api.service';\r\nimport {\r\n  CardModule,\r\n  ColComponent,\r\n  DropdownComponent,\r\n  ModalModule,\r\n  NavComponent,\r\n  NavItemComponent,\r\n  RowComponent,\r\n  TabsModule\r\n} from '@coreui/angular';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToastService, ToastType} from '../../../../common/views/default-layout/toasts/toast.service';\r\n\r\ndescribe('CustomerDetailComponent', () => {\r\n  let customerApiService: jasmine.SpyObj<CustomerApiService>;\r\n  let customerNoteApiService: jasmine.SpyObj<CustomerNoteApiService>;\r\n  let fileHelperService: jasmine.SpyObj<FileHelperService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n  let toastService: jasmine.SpyObj<ToastService>;\r\n\r\n  const mockCountry = {\r\n    id: 0,\r\n    code: 'AT',\r\n    name: 'Österreich'\r\n  };\r\n  const mockCustomer: CustomerData = {\r\n    id: 133,\r\n    issuer: {\r\n      personnelNumber: '12345',\r\n      firstname: 'first',\r\n      lastname: 'last'\r\n    },\r\n    issuedAt: moment().startOf('day').utc().toDate(),\r\n    lastname: 'Mustermann',\r\n    firstname: 'Max',\r\n    birthDate: moment().subtract(30, 'years').startOf('day').utc().toDate(),\r\n    country: mockCountry,\r\n    telephoneNumber: '00436644123123123',\r\n    email: 'max.mustermann@gmail.com',\r\n\r\n    address: {\r\n      street: 'Teststraße',\r\n      houseNumber: '123A',\r\n      stairway: '1',\r\n      door: '21',\r\n      postalCode: 1020,\r\n      city: 'Wien',\r\n    },\r\n\r\n    employer: 'test employer',\r\n    income: 1000,\r\n    incomeDue: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n\r\n    validUntil: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n\r\n    additionalPersons: [\r\n      {\r\n        key: 0,\r\n        id: 0,\r\n        lastname: 'Add',\r\n        firstname: 'Pers 1',\r\n        birthDate: moment().subtract(5, 'years').startOf('day').utc().toDate(),\r\n        employer: 'test employer 2',\r\n        income: 50,\r\n        incomeDue: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n        country: mockCountry,\r\n        excludeFromHousehold: false,\r\n        receivesFamilyBonus: true\r\n      },\r\n      {\r\n        key: 1,\r\n        id: 1,\r\n        lastname: 'Add',\r\n        firstname: 'Pers 2',\r\n        birthDate: moment().subtract(10, 'years').startOf('day').utc().toDate(),\r\n        country: mockCountry,\r\n        excludeFromHousehold: true,\r\n        receivesFamilyBonus: false\r\n      }\r\n    ]\r\n  };\r\n  const mockNotes = [\r\n    {\r\n      author: 'author1',\r\n      timestamp: moment('2023-03-22T19:45:25.615477+01:00').toDate(),\r\n      note: 'note from author 2'\r\n    },\r\n    {\r\n      author: 'author2',\r\n      timestamp: moment('2023-03-20T19:45:25.615477+01:00').toDate(),\r\n      note: 'note from author 1'\r\n    }\r\n  ];\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    const customerApiServiceSpy = jasmine.createSpyObj('CustomerApiService', ['generatePdf', 'deleteCustomer', 'updateCustomer']);\r\n    const customerNoteApiServiceSpy = jasmine.createSpyObj('CustomerNoteApiService', ['createNewNote']);\r\n    const fileHelperServiceSpy = jasmine.createSpyObj('FileHelperService', ['downloadFile']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n    const toastServiceSpy = jasmine.createSpyObj('ToastService', ['showToast']);\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        NoopAnimationsModule,\r\n        CommonModule,\r\n        ModalModule,\r\n        TabsModule,\r\n        DropdownComponent,\r\n        NavComponent,\r\n        NavItemComponent,\r\n        CardModule,\r\n        ColComponent,\r\n        RowComponent\r\n      ],\r\n      declarations: [\r\n        CustomerDetailComponent\r\n      ],\r\n      providers: [\r\n        {\r\n          provide: LOCALE_ID,\r\n          useValue: 'de-AT'\r\n        },\r\n        {\r\n          provide: DEFAULT_CURRENCY_CODE,\r\n          useValue: 'EUR'\r\n        },\r\n        {\r\n          provide: CustomerApiService,\r\n          useValue: customerApiServiceSpy\r\n        },\r\n        {\r\n          provide: CustomerNoteApiService,\r\n          useValue: customerNoteApiServiceSpy\r\n        },\r\n        {\r\n          provide: FileHelperService,\r\n          useValue: fileHelperServiceSpy\r\n        },\r\n        {\r\n          provide: ActivatedRoute,\r\n          useValue: {\r\n            snapshot: {\r\n              data: {\r\n                customerData: mockCustomer,\r\n                customerNotes: mockNotes\r\n              }\r\n            }\r\n          }\r\n        },\r\n        {\r\n          provide: Router,\r\n          useValue: routerSpy\r\n        },\r\n        {\r\n          provide: ToastService,\r\n          useValue: toastServiceSpy\r\n        }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    customerApiService = TestBed.inject(CustomerApiService) as jasmine.SpyObj<CustomerApiService>;\r\n    customerNoteApiService = TestBed.inject(CustomerNoteApiService) as jasmine.SpyObj<CustomerNoteApiService>;\r\n    fileHelperService = TestBed.inject(FileHelperService) as jasmine.SpyObj<FileHelperService>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    toastService = TestBed.inject(ToastService) as jasmine.SpyObj<ToastService>;\r\n  }));\r\n\r\n  it('component can be created', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('initial data loaded and shown correctly', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n    fixture.detectChanges();\r\n\r\n    expect(component.customerData).toEqual(mockCustomer);\r\n    expect(component.customerNotes).toEqual(mockNotes);\r\n\r\n    expect(getTextByTestId(fixture, 'customerIdText')).toBe('133');\r\n    expect(getTextByTestId(fixture, 'nameText')).toBe('Mustermann Max');\r\n\r\n    const birthDateAge = moment(mockCustomer.birthDate).format('DD.MM.YYYY') + ' (' + moment().diff(mockCustomer.birthDate, 'years') + ')';\r\n    expect(getTextByTestId(fixture, 'birthDateAgeText')).toBe(birthDateAge);\r\n    expect(getTextByTestId(fixture, 'countryText')).toBe('Österreich');\r\n    expect(getTextByTestId(fixture, 'telephoneNumberText')).toBe('00436644123123123');\r\n    expect(getTextByTestId(fixture, 'emailText')).toBe('max.mustermann@gmail.com');\r\n    expect(getTextByTestId(fixture, 'addressLine1Text')).toBe('Teststraße 123A, Stiege 1, Top 21');\r\n    expect(getTextByTestId(fixture, 'addressLine2Text')).toBe('1020 Wien');\r\n    expect(getTextByTestId(fixture, 'employerText')).toBe('test employer');\r\n    expect(getTextByTestId(fixture, 'incomeText')).toBe('€ 1.000,00');\r\n\r\n    expect(getTextByTestId(fixture, 'incomeDueText')).toBe(moment(mockCustomer.incomeDue).format('DD.MM.YYYY'));\r\n    expect(getTextByTestId(fixture, 'validUntilText')).toBe(moment(mockCustomer.validUntil).format('DD.MM.yyyy'));\r\n    expect(getTextByTestId(fixture, 'issuedInformation')).toBe('am ' + moment(mockCustomer.issuedAt).format('DD.MM.YYYY') + ' von 12345 first last');\r\n\r\n    expect(getTextByTestId(fixture, 'addperson-0-lastnameText')).toBe('Add');\r\n    expect(getTextByTestId(fixture, 'addperson-0-firstnameText')).toBe('Pers 1');\r\n    expect(getTextByTestId(fixture, 'addperson-0-receivesFamilyBonus')).toBe('Ja');\r\n\r\n    const birthDateAgePers1 = moment(mockCustomer.additionalPersons[0].birthDate).format('DD.MM.YYYY') +\r\n      ' (' + moment().diff(mockCustomer.additionalPersons[0].birthDate, 'years') + ')';\r\n    expect(getTextByTestId(fixture, 'addperson-0-birthDateAgeText')).toBe(birthDateAgePers1);\r\n\r\n    expect(getTextByTestId(fixture, 'addperson-0-countryText')).toBe('Österreich');\r\n    expect(getTextByTestId(fixture, 'addperson-0-employerText')).toBe('test employer 2');\r\n    expect(getTextByTestId(fixture, 'addperson-0-incomeText')).toBe('€ 50,00');\r\n    expect(getTextByTestId(fixture, 'addperson-0-incomeDueText'))\r\n      .toBe(moment(mockCustomer.additionalPersons[0].incomeDue).format('DD.MM.YYYY'));\r\n    expect(getTextByTestId(fixture, 'addperson-1-incomeText')).toBe('-');\r\n    expect(getTextByTestId(fixture, 'addperson-1-incomeDueText')).toBe('-');\r\n\r\n    // validate note\r\n    const expectedTimestamp = moment(mockNotes[0].timestamp).format('DD.MM.YYYY HH:mm');\r\n    expect(getTextByTestId(fixture, 'note-title')).toBe(expectedTimestamp + ' author1');\r\n\r\n    // TODO fix flaky assert\r\n    // expect(getTextByTestId(fixture, 'note-text')).toBe('note from author 2');\r\n  });\r\n\r\n  it('printMasterdata', () => {\r\n    const response = new HttpResponse({\r\n      status: 200,\r\n      headers: new HttpHeaders(\r\n        {'Content-Disposition': 'inline; filename=test-name-1.pdf'}\r\n      ),\r\n      body: new Blob()\r\n    });\r\n    customerApiService.generatePdf.withArgs(mockCustomer.id, 'MASTERDATA').and.returnValue(of(response));\r\n\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n\r\n    component.printMasterdata();\r\n\r\n    expect(fileHelperService.downloadFile).toHaveBeenCalledWith('test-name-1.pdf', response.body);\r\n  });\r\n\r\n  it('printIdCard', () => {\r\n    const response = new HttpResponse({\r\n      status: 200,\r\n      headers: new HttpHeaders(\r\n        {'Content-Disposition': 'inline; filename=test-name-1.pdf'}\r\n      ),\r\n      body: new Blob()\r\n    });\r\n    customerApiService.generatePdf.withArgs(mockCustomer.id, 'IDCARD').and.returnValue(of(response));\r\n\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n\r\n    component.printIdCard();\r\n\r\n    expect(fileHelperService.downloadFile).toHaveBeenCalledWith('test-name-1.pdf', response.body);\r\n  });\r\n\r\n  it('printCombined', () => {\r\n    const response = new HttpResponse({\r\n      status: 200,\r\n      headers: new HttpHeaders(\r\n        {'Content-Disposition': 'inline; filename=test-name-1.pdf'}\r\n      ),\r\n      body: new Blob()\r\n    });\r\n    customerApiService.generatePdf.withArgs(mockCustomer.id, 'COMBINED').and.returnValue(of(response));\r\n\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n\r\n    component.printCombined();\r\n\r\n    expect(fileHelperService.downloadFile).toHaveBeenCalledWith('test-name-1.pdf', response.body);\r\n  });\r\n\r\n  it('editCustomer', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n\r\n    component.editCustomer();\r\n\r\n    expect(router.navigate).toHaveBeenCalledWith(['/kunden/bearbeiten', mockCustomer.id]);\r\n  });\r\n\r\n  it('isValid with date of yesterday results in false', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = {\r\n      ...mockCustomer,\r\n      validUntil: moment().subtract(1, 'days').toDate()\r\n    };\r\n\r\n    const valid = component.isValid();\r\n\r\n    expect(valid).toBeFalsy();\r\n  });\r\n\r\n  it('isValid with date of today results in true', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = {\r\n      ...mockCustomer,\r\n      validUntil: moment().toDate()\r\n    };\r\n\r\n    const valid = component.isValid();\r\n\r\n    expect(valid).toBeTrue();\r\n  });\r\n\r\n  it('isValid with date of tomorrow results in true', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = {\r\n      ...mockCustomer,\r\n      validUntil: moment().add(1, 'days').toDate()\r\n    };\r\n\r\n    const valid = component.isValid();\r\n    expect(valid).toBeTrue();\r\n\r\n    // TODO expect(incomeDueText)-class success or danger\r\n  });\r\n\r\n  it('delete customer successful', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = mockCustomer;\r\n\r\n    customerApiService.deleteCustomer.and.returnValue(of(null));\r\n\r\n    component.deleteCustomer();\r\n\r\n    expect(customerApiService.deleteCustomer).toHaveBeenCalled();\r\n    expect(router.navigate).toHaveBeenCalledWith(['/kunden/suchen']);\r\n  });\r\n\r\n  it('delete customer failed', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.showDeleteCustomerModal = true;\r\n    component.customerData = mockCustomer;\r\n\r\n    customerApiService.deleteCustomer.and.returnValue(throwError(() => {\r\n      return {status: 404};\r\n    }));\r\n\r\n    component.deleteCustomer();\r\n\r\n    expect(customerApiService.deleteCustomer).toHaveBeenCalled();\r\n    expect(router.navigate).not.toHaveBeenCalledWith(['/kunden/suchen']);\r\n    expect(component.showDeleteCustomerModal).toBeFalsy();\r\n    expect(toastService.showToast).toHaveBeenCalledWith({type: ToastType.ERROR, title: 'Löschen fehlgeschlagen!'});\r\n  });\r\n\r\n  it('prolong customer', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = mockCustomer;\r\n\r\n    const expectedCustomerData = {\r\n      ...mockCustomer,\r\n      validUntil: moment(mockCustomer.validUntil).add(3, 'months').endOf('day').toDate()\r\n    };\r\n    customerApiService.updateCustomer.and.returnValue(of(expectedCustomerData));\r\n\r\n    component.prolongCustomer(3);\r\n\r\n    expect(customerApiService.updateCustomer).toHaveBeenCalledWith(expectedCustomerData);\r\n    expect(component.customerData).toEqual(expectedCustomerData);\r\n  });\r\n\r\n  it('invalidate customer', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = mockCustomer;\r\n\r\n    const expectedCustomerData = {\r\n      ...mockCustomer,\r\n      validUntil: moment().subtract(1, 'day').endOf('day').toDate()\r\n    };\r\n    customerApiService.updateCustomer.and.returnValue(of(expectedCustomerData));\r\n\r\n    component.invalidateCustomer();\r\n\r\n    expect(customerApiService.updateCustomer).toHaveBeenCalledWith(expectedCustomerData);\r\n    expect(component.customerData).toEqual(expectedCustomerData);\r\n  });\r\n\r\n  it('lock customer', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = mockCustomer;\r\n    const lockReasonText = 'locked due to lorem ipsum';\r\n    component.lockReasonText = lockReasonText;\r\n\r\n    const expectedCustomerData = {\r\n      ...mockCustomer,\r\n      locked: true,\r\n      lockReason: lockReasonText\r\n    };\r\n    customerApiService.updateCustomer.and.returnValue(of(expectedCustomerData));\r\n\r\n    component.lockCustomer();\r\n\r\n    expect(customerApiService.updateCustomer).toHaveBeenCalledWith(expectedCustomerData);\r\n    expect(component.customerData).toEqual(expectedCustomerData);\r\n  });\r\n\r\n  it('unlock customer', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = {\r\n      ...mockCustomer,\r\n      locked: true,\r\n      lockedBy: 'whoever',\r\n      lockReason: 'lock-text'\r\n    };\r\n    fixture.detectChanges();\r\n\r\n    const expectedCustomerData = {\r\n      ...mockCustomer,\r\n      locked: false\r\n    };\r\n    customerApiService.updateCustomer.and.returnValue(of(expectedCustomerData));\r\n\r\n    component.unlockCustomer();\r\n\r\n    expect(customerApiService.updateCustomer).toHaveBeenCalledWith(expectedCustomerData);\r\n    expect(component.customerData).toEqual(expectedCustomerData);\r\n  });\r\n\r\n  it('add new note to customer', () => {\r\n    const fixture = TestBed.createComponent(CustomerDetailComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerData = mockCustomer;\r\n    component.customerNotes = [];\r\n    component.showAddNewNoteModal = true;\r\n    const noteText = 'new note\\ntext';\r\n    const sanitizedNoteText = 'new note<br/>text';\r\n    component.newNoteText = noteText;\r\n\r\n    const resultNote: CustomerNoteItem = {\r\n      author: 'author1',\r\n      timestamp: moment('2023-03-22T19:45:25.615477+01:00').toDate(),\r\n      note: sanitizedNoteText\r\n    };\r\n    customerNoteApiService.createNewNote.and.returnValue(of(resultNote));\r\n\r\n    component.addNewNote();\r\n\r\n    expect(customerNoteApiService.createNewNote).toHaveBeenCalledWith(mockCustomer.id, sanitizedNoteText);\r\n    expect(component.customerNotes[0]).toEqual(resultNote);\r\n    expect(component.newNoteText).toBeUndefined();\r\n    expect(component.showAddNewNoteModal).toBeFalsy();\r\n  });\r\n\r\n  function getTextByTestId(fixture: ComponentFixture<CustomerDetailComponent>, testId: string): string {\r\n    return fixture.debugElement.query(By.css(`[testid=\"${testId}\"]`)).nativeElement.textContent;\r\n  }\r\n\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\modules\\customer\\views\\customer-edit\\customer-edit-existingcustomer.component.spec.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 3 times.",
        "line": 162,
        "column": 51,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 162,
        "endColumn": 67
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {HttpClientTestingModule} from '@angular/common/http/testing';\r\nimport {TestBed, waitForAsync} from '@angular/core/testing';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {RouterTestingModule} from '@angular/router/testing';\r\nimport * as moment from 'moment';\r\nimport {of} from 'rxjs';\r\nimport {CustomerApiService, CustomerData} from '../../../../api/customer-api.service';\r\nimport {CustomerFormComponent} from '../customer-form/customer-form.component';\r\nimport {CustomerEditComponent} from './customer-edit.component';\r\nimport {\r\n  BgColorDirective,\r\n  CardModule,\r\n  ColComponent,\r\n  InputGroupComponent,\r\n  ModalModule,\r\n  RowComponent\r\n} from '@coreui/angular';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\n\r\ndescribe('CustomerEditComponent - Editing an existing customer', () => {\r\n  const testCountry = {\r\n    id: 0,\r\n    code: 'AT',\r\n    name: 'Österreich'\r\n  };\r\n  const testCountry2 = {\r\n    id: 1,\r\n    code: 'DE',\r\n    name: 'Deutschland'\r\n  };\r\n  const testCustomerData: CustomerData = {\r\n    id: 123,\r\n    lastname: 'Mustermann',\r\n    firstname: 'Max',\r\n    birthDate: moment().subtract(40, 'years').startOf('day').utc().toDate(),\r\n    country: testCountry,\r\n    telephoneNumber: '00436641231231',\r\n    email: 'max.mustermann@gmail.com',\r\n\r\n    address: {\r\n      street: 'Teststraße',\r\n      houseNumber: '123A',\r\n      stairway: '1',\r\n      door: '21',\r\n      postalCode: 1020,\r\n      city: 'Wien',\r\n    },\r\n\r\n    employer: 'test employer',\r\n    income: 1000,\r\n    incomeDue: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n    validUntil: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n\r\n    additionalPersons: [\r\n      {\r\n        key: 0,\r\n        id: 0,\r\n        lastname: 'Add',\r\n        firstname: 'Pers 1',\r\n        birthDate: moment().subtract(5, 'years').startOf('day').utc().toDate(),\r\n        country: testCountry,\r\n        income: 50,\r\n        incomeDue: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n        excludeFromHousehold: false,\r\n        receivesFamilyBonus: true\r\n      },\r\n      {\r\n        key: 1,\r\n        id: 1,\r\n        lastname: 'Add',\r\n        firstname: 'Pers 2',\r\n        birthDate: moment().subtract(2, 'years').startOf('day').utc().toDate(),\r\n        country: testCountry2,\r\n        excludeFromHousehold: true,\r\n        receivesFamilyBonus: false\r\n      }\r\n    ]\r\n  };\r\n\r\n  let router: jasmine.SpyObj<Router>;\r\n  let apiService: jasmine.SpyObj<CustomerApiService>;\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        RouterTestingModule,\r\n        ReactiveFormsModule,\r\n        ModalModule,\r\n        NoopAnimationsModule,\r\n        CardModule,\r\n        InputGroupComponent,\r\n        RowComponent,\r\n        ColComponent,\r\n        BgColorDirective\r\n      ],\r\n      declarations: [\r\n        CustomerEditComponent,\r\n        CustomerFormComponent\r\n      ],\r\n      providers: [\r\n        {\r\n          provide: CustomerApiService,\r\n          useValue: jasmine.createSpyObj('CustomerApiService', ['validate', 'getCustomer', 'createCustomer', 'updateCustomer'])\r\n        },\r\n        {\r\n          provide: Router,\r\n          useValue: jasmine.createSpyObj('Router', ['navigate'])\r\n        },\r\n        {\r\n          provide: ActivatedRoute,\r\n          useValue: {\r\n            snapshot: {\r\n              data: {\r\n                customerData: testCustomerData\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    apiService = TestBed.inject(CustomerApiService) as jasmine.SpyObj<CustomerApiService>;\r\n  }));\r\n\r\n  it('initial checks', waitForAsync(() => {\r\n    apiService.getCustomer.withArgs(testCustomerData.id).and.returnValue(of(testCustomerData));\r\n\r\n    const fixture = TestBed.createComponent(CustomerEditComponent);\r\n    const component = fixture.componentInstance;\r\n    expect(component).toBeTruthy();\r\n\r\n    component.ngOnInit();\r\n    fixture.detectChanges();\r\n\r\n    expect(component.editMode).toBeTrue();\r\n    expect(component.customerValidForSave).toBeFalse();\r\n  }));\r\n\r\n  it('existing customer saved successfully', () => {\r\n    const customerFormComponent = jasmine.createSpyObj('CustomerFormComponent', ['markAllAsTouched', 'isValid']);\r\n    customerFormComponent.isValid.and.returnValue(true);\r\n    apiService.getCustomer.withArgs(testCustomerData.id).and.returnValue(of(testCustomerData));\r\n    apiService.updateCustomer.withArgs(testCustomerData).and.returnValue(of(testCustomerData));\r\n\r\n    const fixture = TestBed.createComponent(CustomerEditComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerFormComponent = customerFormComponent;\r\n    component.ngOnInit();\r\n    component.customerUpdated = component.customerInput;\r\n    component.customerValidForSave = true;\r\n\r\n    component.save();\r\n\r\n    expect(component.isSaveEnabled()).toBeTrue();\r\n    expect(component.editMode).toBeTrue();\r\n    expect(component.customerInput).toEqual(testCustomerData);\r\n    expect(customerFormComponent.markAllAsTouched).toHaveBeenCalled();\r\n    expect(apiService.updateCustomer).toHaveBeenCalledWith(jasmine.objectContaining(testCustomerData));\r\n    expect(router.navigate).toHaveBeenCalledWith(['/kunden/detail', testCustomerData.id]);\r\n  });\r\n\r\n  it('existing customer saved successfully even when not entitled', () => {\r\n    const customerFormComponent = jasmine.createSpyObj('CustomerFormComponent', ['markAllAsTouched', 'isValid']);\r\n    customerFormComponent.isValid.and.returnValue(true);\r\n    apiService.getCustomer.withArgs(testCustomerData.id).and.returnValue(of(testCustomerData));\r\n    apiService.updateCustomer.withArgs(testCustomerData).and.returnValue(of(testCustomerData));\r\n\r\n    const fixture = TestBed.createComponent(CustomerEditComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerFormComponent = customerFormComponent;\r\n    component.ngOnInit();\r\n    component.customerUpdated = component.customerInput;\r\n    component.customerValidForSave = false;\r\n\r\n    component.save();\r\n    fixture.detectChanges();\r\n\r\n    expect(component.isSaveEnabled()).toBeTrue();\r\n    expect(component.editMode).toBeTrue();\r\n    expect(component.customerInput).toEqual(testCustomerData);\r\n    expect(customerFormComponent.markAllAsTouched).toHaveBeenCalled();\r\n    expect(apiService.updateCustomer).toHaveBeenCalledWith(jasmine.objectContaining(testCustomerData));\r\n    expect(router.navigate).toHaveBeenCalledWith(['/kunden/detail', testCustomerData.id]);\r\n  });\r\n\r\n  it('existing customer save failed when form is invalid', () => {\r\n    const customerFormComponent = jasmine.createSpyObj('CustomerFormComponent', ['markAllAsTouched', 'isValid']);\r\n    customerFormComponent.isValid.and.returnValue(false);\r\n    apiService.updateCustomer.withArgs(testCustomerData).and.returnValue(of(testCustomerData));\r\n\r\n    const fixture = TestBed.createComponent(CustomerEditComponent);\r\n    const component = fixture.componentInstance;\r\n    component.customerFormComponent = customerFormComponent;\r\n    component.customerUpdated = component.customerInput;\r\n    component.ngOnInit();\r\n\r\n    component.save();\r\n\r\n    expect(component.isSaveEnabled()).toBeFalse();\r\n    expect(component.editMode).toBeTrue();\r\n    expect(component.customerInput).toEqual(testCustomerData);\r\n    expect(customerFormComponent.markAllAsTouched).toHaveBeenCalled();\r\n    expect(apiService.updateCustomer).not.toHaveBeenCalled();\r\n    expect(router.navigate).not.toHaveBeenCalledWith(['/kunden/detail', testCustomerData.id]);\r\n  });\r\n\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "D:\\development\\repos\\wrk-admin\\frontend\\src\\main\\webapp\\src\\app\\modules\\customer\\views\\customer-form\\customer-form.component.spec.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-duplicate-string",
        "severity": 2,
        "message": "Define a constant instead of duplicating this literal 4 times.",
        "line": 223,
        "column": 55,
        "nodeType": "Literal",
        "messageId": "defineConstant",
        "endLine": 223,
        "endColumn": 67
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {TestBed, waitForAsync} from '@angular/core/testing';\r\nimport {RouterTestingModule} from '@angular/router/testing';\r\nimport * as moment from 'moment';\r\nimport {of} from 'rxjs';\r\nimport {CountryApiService} from '../../../../api/country-api.service';\r\nimport {CustomerData} from '../../../../api/customer-api.service';\r\nimport {CustomerFormComponent} from './customer-form.component';\r\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\r\nimport {CardModule, ColComponent, InputGroupComponent, RowComponent} from '@coreui/angular';\r\n\r\ndescribe('CustomerFormComponent', () => {\r\n  let apiService: jasmine.SpyObj<CountryApiService>;\r\n\r\n  const mockCountryList = [\r\n    {id: 0, code: 'AT', name: 'Österreich'},\r\n    {id: 1, code: 'DE', name: 'Deutschland'}\r\n  ];\r\n\r\n  const testCustomerData: CustomerData = {\r\n    id: 123,\r\n    lastname: 'Mustermann',\r\n    firstname: 'Max',\r\n    birthDate: moment().subtract(20, 'years').startOf('day').utc().toDate(),\r\n    country: mockCountryList[0],\r\n    telephoneNumber: '0043660123123',\r\n    email: 'test@mail.com',\r\n    address: {\r\n      street: 'Testgasse',\r\n      houseNumber: '123A',\r\n      door: '1',\r\n      stairway: '1',\r\n      postalCode: 1234,\r\n      city: 'Wien',\r\n    },\r\n    employer: 'WRK',\r\n    income: 123.50,\r\n    incomeDue: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n    validUntil: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n    additionalPersons: [\r\n      {\r\n        key: 0,\r\n        id: 0,\r\n        lastname: 'Last 1',\r\n        firstname: 'First 1',\r\n        birthDate: moment().subtract(1, 'years').startOf('day').utc().toDate(),\r\n        country: mockCountryList[0],\r\n        employer: 'test employer 2',\r\n        income: 200,\r\n        incomeDue: moment().add(1, 'years').startOf('day').utc().toDate(),\r\n        excludeFromHousehold: false,\r\n        receivesFamilyBonus: true\r\n      },\r\n      {\r\n        key: 1,\r\n        id: 1,\r\n        lastname: 'Last 2',\r\n        firstname: 'First 2',\r\n        birthDate: moment().subtract(4, 'years').startOf('day').utc().toDate(),\r\n        country: mockCountryList[0],\r\n        excludeFromHousehold: true,\r\n        receivesFamilyBonus: false\r\n      }\r\n    ]\r\n  };\r\n\r\n  beforeEach(waitForAsync(() => {\r\n    const apiServiceSpy = jasmine.createSpyObj('CountryApiService', ['getCountries']);\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        RouterTestingModule,\r\n        ReactiveFormsModule,\r\n        InputGroupComponent,\r\n        CardModule,\r\n        RowComponent,\r\n        ColComponent\r\n      ],\r\n      declarations: [\r\n        CustomerFormComponent\r\n      ],\r\n      providers: [\r\n        {\r\n          provide: CountryApiService,\r\n          useValue: apiServiceSpy\r\n        }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    apiService = TestBed.inject(CountryApiService) as jasmine.SpyObj<CountryApiService>;\r\n  }));\r\n\r\n  it('should create the component', waitForAsync(() => {\r\n    const fixture = TestBed.createComponent(CustomerFormComponent);\r\n    const component = fixture.componentInstance;\r\n    expect(component).toBeTruthy();\r\n  }));\r\n\r\n  it('data filling works', waitForAsync(() => {\r\n    apiService.getCountries.and.returnValue(of(mockCountryList));\r\n\r\n    const fixture = TestBed.createComponent(CustomerFormComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    spyOn(component.customerDataChange, 'emit');\r\n    component.ngOnInit();\r\n    component.customerData = testCustomerData;\r\n\r\n    // TODO check dom elements - makes more sense\r\n    /*\r\n    fixture.detectChanges();\r\n\r\n    fixture.whenStable().then(() => {\r\n      expect(fixture.debugElement.query(By.css('[testid=\"idInput\"]')).nativeElement.value).toBe(testData.id);\r\n    });\r\n    */\r\n\r\n    expect(component.id.value).toBe(testCustomerData.id);\r\n    expect(component.lastname.value).toBe(testCustomerData.lastname);\r\n    expect(component.firstname.value).toBe(testCustomerData.firstname);\r\n    expect(component.birthDate.value).toBe(testCustomerData.birthDate);\r\n    expect(component.country.value).toBe(testCustomerData.country);\r\n    expect(component.telephoneNumber.value).toBe(testCustomerData.telephoneNumber);\r\n    expect(component.email.value).toBe(testCustomerData.email);\r\n    expect(component.street.value).toBe(testCustomerData.address.street);\r\n    expect(component.houseNumber.value).toBe(testCustomerData.address.houseNumber);\r\n    expect(component.door.value).toBe(testCustomerData.address.door);\r\n    expect(component.stairway.value).toBe(testCustomerData.address.stairway);\r\n    expect(component.postalCode.value).toBe(testCustomerData.address.postalCode);\r\n    expect(component.city.value).toBe(testCustomerData.address.city);\r\n    expect(component.employer.value).toBe(testCustomerData.employer);\r\n    expect(component.income.value).toBe(testCustomerData.income);\r\n    expect(component.incomeDue.value).toBe(testCustomerData.incomeDue);\r\n    expect(component.validUntil.value).toBe(testCustomerData.validUntil);\r\n\r\n    expect(component.isValid()).toBeTrue();\r\n    expect(component.countries).toEqual(mockCountryList);\r\n\r\n    expect(component.additionalPersons.length).toBe(2);\r\n    expect(component.additionalPersons.at(0).value)\r\n      .toEqual(jasmine.objectContaining({\r\n        id: testCustomerData.additionalPersons[0].id,\r\n        lastname: testCustomerData.additionalPersons[0].lastname,\r\n        firstname: testCustomerData.additionalPersons[0].firstname,\r\n        birthDate: testCustomerData.additionalPersons[0].birthDate,\r\n        country: testCustomerData.additionalPersons[0].country,\r\n        employer: testCustomerData.additionalPersons[0].employer,\r\n        income: testCustomerData.additionalPersons[0].income,\r\n        incomeDue: testCustomerData.additionalPersons[0].incomeDue,\r\n        receivesFamilyBonus: testCustomerData.additionalPersons[0].receivesFamilyBonus\r\n      }));\r\n    expect(component.additionalPersons.at(1).value)\r\n      .toEqual(jasmine.objectContaining({\r\n        id: testCustomerData.additionalPersons[1].id,\r\n        lastname: testCustomerData.additionalPersons[1].lastname,\r\n        firstname: testCustomerData.additionalPersons[1].firstname,\r\n        birthDate: testCustomerData.additionalPersons[1].birthDate,\r\n        country: testCustomerData.additionalPersons[1].country,\r\n        excludeFromHousehold: testCustomerData.additionalPersons[1].excludeFromHousehold,\r\n        receivesFamilyBonus: testCustomerData.additionalPersons[1].receivesFamilyBonus\r\n      }));\r\n  }));\r\n\r\n  it('data update works', waitForAsync(() => {\r\n    apiService.getCountries.and.returnValue(of(mockCountryList));\r\n\r\n    const fixture = TestBed.createComponent(CustomerFormComponent);\r\n    const component = fixture.componentInstance;\r\n\r\n    spyOn(component.customerDataChange, 'emit');\r\n    component.ngOnInit();\r\n    component.customerData = testCustomerData;\r\n\r\n    const updatedLastname = 'updated';\r\n    const updatedBirthDate = moment().subtract(30, 'years').startOf('day').utc().toDate();\r\n    const updatedIncome = 54321;\r\n    const updatedIncomeDue = moment().add(2, 'years').startOf('day').utc().toDate();\r\n\r\n    component.lastname.setValue(updatedLastname);\r\n    component.birthDate.setValue(updatedBirthDate);\r\n    component.income.setValue(updatedIncome);\r\n    component.incomeDue.setValue(updatedIncomeDue);\r\n\r\n    // TODO const updatedPers1Lastname = 'Pers1UpdatedLastName';\r\n    // TODO component.additionalPersons.at(1).get('lastname').setValue(updatedPers1Lastname);\r\n    fixture.detectChanges();\r\n\r\n    expect(component.customerDataChange.emit).toHaveBeenCalledWith(jasmine.objectContaining({\r\n      lastname: updatedLastname,\r\n      birthDate: updatedBirthDate,\r\n      income: updatedIncome\r\n    }));\r\n\r\n    // TODO validate add person change\r\n    /*\r\n    expect(component.customerDataChange.emit).toHaveBeenCalledWith(jasmine.objectContaining({\r\n      additionalPersons: [\r\n        {},\r\n        {\r\n          lastname: updatedPers1Lastname\r\n        }]\r\n    }));\r\n     */\r\n  }));\r\n\r\n  it('trackBy', () => {\r\n    const fixture = TestBed.createComponent(CustomerFormComponent);\r\n    const component = fixture.componentInstance;\r\n    const testUuid = 'test-UUID';\r\n\r\n    const trackingId = component.trackBy(0, new FormGroup({\r\n      key: new FormControl(testUuid)\r\n    }));\r\n\r\n    expect(trackingId).toBe(testUuid);\r\n  });\r\n\r\n  it('validUntil set when incomeDue is updated', () => {\r\n    apiService.getCountries.and.returnValue(of(mockCountryList));\r\n\r\n    const fixture = TestBed.createComponent(CustomerFormComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n    component.incomeDue.setValue(moment('01.01.2000', 'DD.MM.YYYY').toDate());\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(component.validUntil.value).toEqual(moment('01.03.2000', 'DD.MM.YYYY').toDate());\r\n  });\r\n\r\n  it('validUntil set when incomeDue is updated respects additional persons', () => {\r\n    apiService.getCountries.and.returnValue(of(mockCountryList));\r\n\r\n    const fixture = TestBed.createComponent(CustomerFormComponent);\r\n    const component = fixture.componentInstance;\r\n    component.ngOnInit();\r\n    component.incomeDue.setValue(moment('03.03.2000', 'DD.MM.YYYY').toDate());\r\n    component.addNewPerson();\r\n    component.addNewPerson();\r\n    component.additionalPersons.at(0).get('incomeDue').setValue('2000-02-02');\r\n    component.additionalPersons.at(1).get('incomeDue').setValue('2000-01-01');\r\n\r\n    component.removePerson(1);\r\n\r\n    fixture.detectChanges();\r\n\r\n    expect(component.validUntil.value).toEqual(moment('02.04.2000', 'DD.MM.YYYY').toDate());\r\n  });\r\n\r\n});\r\n",
    "usedDeprecatedRules": []
  }
]
